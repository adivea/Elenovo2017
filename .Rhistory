version
df <- data.frame(first = c('Adela'),
last = c('Sobotkova'),
lucky = c(7),
stringsAsFactors = FALSE)
df[0,0]
if(numeric(5)) {print("True")} else{print("Folly")}
download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv", destfile = "data/gapminder-FiveYearData.csv")
library(bootnet)
library(qgraph)
#This one gives us our data to play with for the Big Five Personality Factors
library(psych)
setwd("~/Downloads/Mounds")
o <- read.table(file="Mounds2.csv", header = TRUE, na.strings=c("N/A","NA","no"))
o <- read.table(file="Mounds2.csv", header = TRUE, na.strings=c("N/A","NA"," "))
o <- read.table(file="Mounds2.csv", header = TRUE, na.strings=c("N/A","NA"," "))
o <- read.table(file="Mounds2.csv", header = TRUE)
m <- read.csv(file="Mounds2.csv",header=TRUE, stringsAsFactors = FALSE)
head(m)
str(m)
dim(M)
dim(M)
dim(m)
lapply(m,class)
set.seed(100)
rpois(100,6)
height <- m$HeightMax
tapply(height, cut(height, 10), median)
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), sum)
tapply(height, cut(height, 5), fraction)
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), mean)
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), median,sd)
str(height)
summary(height)
breaks <- c(1.5,5,10,15,20)
tapply(height, cut(height, 5), median)
h <- cut(height,breaks=breaks)
h
h1 <- cut(height,5)
h1
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), count)
tapply(height, cut(height, 5), frequency)
tapply(height, cut(height, 5), median)
h2 <- table(h1)
h2
h <- cut(height,breaks=breaks)
h
breaks <- c(1,5,10,15,20)
breaks <- c(0.1,5,10,15,20)
h <- cut(height,breaks=breaks)
h
breaks <- c(0.01,5,10,15,20)
h <- cut(height,breaks=breaks)
h
tapply(height,cut(height,breaks),median)
breaks <- c(0.01,1,5,10,15,20)
h <- cut(height,breaks=breaks)
h
tapply(height,cut(height,breaks),median)
hh <- table(h)
(hh <- table(h))
df <- data.frame(hh)
df
library(tidyverse)
setwd("D:/Users/MQ20149304/Documents/RStudio/Elenovo2017")
mounds <- read.csv("data/ElenovoMounds_cleaned.csv")
colnames(mounds)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax, mean) %>%
tally()
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
colnames(mounds)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax, mean) %>%
tally()
mounds %>%
group_by(mounds$Type) %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds %>%
#group_by(mounds$Type) %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds %>%
group_by(Type) %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds$Type[5:10]
levels(mounds$Type)
class(mounds$Type)
mounds %>%
group_by(Type) %>%
tally() %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
tally()
mounds %>%
group_by(Type) %>%
tally() %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
# tally() %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
tally() %>%
mounds %>%
group_by(Type) %>%
tally() %>%
write_csv(tally(), Ele.csv)
mounds %>%
group_by(Type) %>%
tally() %>%
mounds %>%
group_by(Type) %>%
tally() %>%
write_csv(Ele.csv)
Ele <- mounds %>%
group_by(Type) %>%
tally()
write_csv(Ele, "Ele.csv")
MeanH <- mounds %>%
group_by(Type) %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
Ele <- cbind(Ele,MeanH)
Ele
write_csv(Ele, "Ele.csv")
Ele <- cbind(Ele,MeanH[,2])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele,MeanH[,2])
Ele
MeanH <- mounds %>%
group_by(Type) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
View(MeanH)
Ele[-3,]
Ele <- cbind(Ele[-3,],MeanH[,2:4])
Ele <- cbind(Ele[-3,],MeanH[-3,2:4])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele[-3,],MeanH[-3,2:4])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele
write_csv(Ele, "Ele.csv")
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele_stats
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele_stats
write_csv(Ele_stats, "Ele.csv")
colnames(mounds)
Source <- mounds %>%
group_by(Source) %>%
tally()
mounds %>%
group_by(Source) %>%
tally()
Stats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
Source_stats <- cbind(Source,Stats[,-1])
write_csv(Source_stats, 'Sourcestats.csv')
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanH = mean(DiameterMax, na.rm=TRUE))
meanDiam
MeanDiam
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
MeanDiam
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4], MeanDiam[-3:-4, -1])
Ele_stats
HStats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE)) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
Stats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE),
minD=min(DiameterMax, na.rm=TRUE), maxD=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
Stats
Source_stats <- cbind(Source,Stats[,-1])
write_csv(Source_stats, 'Ele_Sourcestats.csv')
Source <- mounds %>%
group_by(Source) %>%
hist(HeightMax)
mounds %>%
group_by(Source) %>%
hist(HeightMax)
mounds %>%
group_by(Source) %>%
hist(mounds$HeightMax)
mounds %>%
group_by(Source) %>%
ggplot(mounds$HeightMax)
Stats
Ele_stats
write_csv(Ele_stats, "Ele_Dimensions.csv")
MeanH <- mounds %>%
group_by(Type) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE))
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
MeanDiam
write_csv(Ele_stats, "Ele_Dimensions.csv")
Stats <- mounds %>%
group_by(Source) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE),
minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
Stats
write_csv(Ele_stats, "Ele_Dimensions.csv")
write_csv(Source_stats, 'Ele_Sourcestats.csv')
mounds %>%
group_by(createdBy) %>%
tally()
mounds <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds %>%
group_by(createdBy) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date = sum(date)) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date) %>%
tally()
# histograms
mounds %>%
group_by(createdBy) %>%
summarize(date=tally(date)) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date=length(date)) %>%
tally()
mounds %>%
group_by(createdBy, date) %>%
tally()
# histograms
mounds %>%
group_by(createdBy, Date) %>%
tally()
teamprogress <- mounds %>%
group_by(createdBy, Date) %>%
tally()
teamprogress
teamprogress[10:20,]
mounds %>%
group_by(createdBy) %>%
tally()
teamprogress[20:n,]
teamprogress[20:30,]
View(MeanDiam)
# Alternatives
download.file("https://raw.githubusercontent.com/adivea/Elenovo2017/master/data/ElenovoMounds_cleaned.csv", "data/MyDataTest.csv")
test <- read_csv("data/MyDataTest.csv")
library(tidyverse)
test <- read_csv("data/MyDataTest.csv")
# Visual check
dim(mounds_adela)
mounds_adela <- read_csv("data/ElenovoMounds_cleaned.csv")
# Visual check
dim(mounds_adela)
mounds_bara <- read_csv2("data/Attributes.csv")
dim(mounds_bara)
# Visual check
dim(mounds_adela)
colnames(mounds_adela)
colnames(mounds_bara)
head(mounds_adela)
colnames(mounds_adela)
View(mounds)
mounds <- merge(mounds_adela, mounds_bara[,c(2,3,9)], # picking uuid, identifier and type from Bara
by ="identifier", all.y=TRUE)
mounds
mounds_adela %>%
filter(which(identifier%in%mounds_bara$MoundID))
# alternative
mounds_adela %>%
filter(which(mounds_adela$identifier%in%mounds_bara$MoundID))
# alternative
mounds_adela %>%
filter(mounds_adela$identifier%in%mounds_bara$MoundID)
