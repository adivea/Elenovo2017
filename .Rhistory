tapply(height, cut(height, 5), mean)
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), median,sd)
str(height)
summary(height)
breaks <- c(1.5,5,10,15,20)
tapply(height, cut(height, 5), median)
h <- cut(height,breaks=breaks)
h
h1 <- cut(height,5)
h1
tapply(height, cut(height, 5), median)
tapply(height, cut(height, 5), count)
tapply(height, cut(height, 5), frequency)
tapply(height, cut(height, 5), median)
h2 <- table(h1)
h2
h <- cut(height,breaks=breaks)
h
breaks <- c(1,5,10,15,20)
breaks <- c(0.1,5,10,15,20)
h <- cut(height,breaks=breaks)
h
breaks <- c(0.01,5,10,15,20)
h <- cut(height,breaks=breaks)
h
tapply(height,cut(height,breaks),median)
breaks <- c(0.01,1,5,10,15,20)
h <- cut(height,breaks=breaks)
h
tapply(height,cut(height,breaks),median)
hh <- table(h)
(hh <- table(h))
df <- data.frame(hh)
df
library(tidyverse)
setwd("D:/Users/MQ20149304/Documents/RStudio/Elenovo2017")
mounds <- read.csv("data/ElenovoMounds_cleaned.csv")
colnames(mounds)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax, mean) %>%
tally()
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
colnames(mounds)
mounds %>%
group_by(mounds$Type) %>%
summarize(mounds$HeightMax, mean) %>%
tally()
mounds %>%
group_by(mounds$Type) %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds %>%
#group_by(mounds$Type) %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds %>%
group_by(Type) %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds$Type[5:10]
levels(mounds$Type)
class(mounds$Type)
mounds %>%
group_by(Type) %>%
tally() %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
tally()
mounds %>%
group_by(Type) %>%
tally() %>%
summarize(meanH = mean(mounds$HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
# tally() %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Type) %>%
tally() %>%
mounds %>%
group_by(Type) %>%
tally() %>%
write_csv(tally(), Ele.csv)
mounds %>%
group_by(Type) %>%
tally() %>%
mounds %>%
group_by(Type) %>%
tally() %>%
write_csv(Ele.csv)
Ele <- mounds %>%
group_by(Type) %>%
tally()
write_csv(Ele, "Ele.csv")
MeanH <- mounds %>%
group_by(Type) %>%
summarize(meanH = mean(HeightMax, na.rm=TRUE))
Ele <- cbind(Ele,MeanH)
Ele
write_csv(Ele, "Ele.csv")
Ele <- cbind(Ele,MeanH[,2])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele,MeanH[,2])
Ele
MeanH <- mounds %>%
group_by(Type) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
View(MeanH)
Ele[-3,]
Ele <- cbind(Ele[-3,],MeanH[,2:4])
Ele <- cbind(Ele[-3,],MeanH[-3,2:4])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele[-3,],MeanH[-3,2:4])
Ele
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele
write_csv(Ele, "Ele.csv")
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele_stats
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4])
Ele_stats
write_csv(Ele_stats, "Ele.csv")
colnames(mounds)
Source <- mounds %>%
group_by(Source) %>%
tally()
mounds %>%
group_by(Source) %>%
tally()
Stats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE))
Source_stats <- cbind(Source,Stats[,-1])
write_csv(Source_stats, 'Sourcestats.csv')
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanH = mean(DiameterMax, na.rm=TRUE))
meanDiam
MeanDiam
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
MeanDiam
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4], MeanDiam[-3:-4, -1])
Ele_stats
HStats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE)) %>%
summarize(min=min(DiameterMax, na.rm=TRUE), max=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
Stats <- mounds %>%
group_by(Source) %>%
summarize(min=min(HeightMax, na.rm=TRUE), max=max(HeightMax,na.rm=TRUE), meanH = mean(HeightMax, na.rm=TRUE),
minD=min(DiameterMax, na.rm=TRUE), maxD=max(DiameterMax,na.rm=TRUE), meanD = mean(DiameterMax, na.rm=TRUE))
Stats
Source_stats <- cbind(Source,Stats[,-1])
write_csv(Source_stats, 'Ele_Sourcestats.csv')
Source <- mounds %>%
group_by(Source) %>%
hist(HeightMax)
mounds %>%
group_by(Source) %>%
hist(HeightMax)
mounds %>%
group_by(Source) %>%
hist(mounds$HeightMax)
mounds %>%
group_by(Source) %>%
ggplot(mounds$HeightMax)
Stats
Ele_stats
write_csv(Ele_stats, "Ele_Dimensions.csv")
MeanH <- mounds %>%
group_by(Type) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE))
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
MeanDiam
write_csv(Ele_stats, "Ele_Dimensions.csv")
Stats <- mounds %>%
group_by(Source) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE),
minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
Stats
write_csv(Ele_stats, "Ele_Dimensions.csv")
write_csv(Source_stats, 'Ele_Sourcestats.csv')
mounds %>%
group_by(createdBy) %>%
tally()
mounds <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds %>%
group_by(createdBy) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date = sum(date)) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date) %>%
tally()
# histograms
mounds %>%
group_by(createdBy) %>%
summarize(date=tally(date)) %>%
tally()
mounds %>%
group_by(createdBy) %>%
summarize(date=length(date)) %>%
tally()
mounds %>%
group_by(createdBy, date) %>%
tally()
# histograms
mounds %>%
group_by(createdBy, Date) %>%
tally()
teamprogress <- mounds %>%
group_by(createdBy, Date) %>%
tally()
teamprogress
teamprogress[10:20,]
mounds %>%
group_by(createdBy) %>%
tally()
teamprogress[20:n,]
teamprogress[20:30,]
View(MeanDiam)
# Alternatives
download.file("https://raw.githubusercontent.com/adivea/Elenovo2017/master/data/ElenovoMounds_cleaned.csv", "data/MyDataTest.csv")
test <- read_csv("data/MyDataTest.csv")
library(tidyverse)
test <- read_csv("data/MyDataTest.csv")
# Visual check
dim(mounds_adela)
mounds_adela <- read_csv("data/ElenovoMounds_cleaned.csv")
# Visual check
dim(mounds_adela)
mounds_bara <- read_csv2("data/Attributes.csv")
dim(mounds_bara)
# Visual check
dim(mounds_adela)
colnames(mounds_adela)
colnames(mounds_bara)
head(mounds_adela)
colnames(mounds_adela)
View(mounds)
mounds <- merge(mounds_adela, mounds_bara[,c(2,3,9)], # picking uuid, identifier and type from Bara
by ="identifier", all.y=TRUE)
mounds
mounds_adela %>%
filter(which(identifier%in%mounds_bara$MoundID))
# alternative
mounds_adela %>%
filter(which(mounds_adela$identifier%in%mounds_bara$MoundID))
# alternative
mounds_adela %>%
filter(mounds_adela$identifier%in%mounds_bara$MoundID)
g <- grep("\e$", f)
g <- grep("\\e$", f)
f <- c("apple","pear","orange")
g <- grep("\\e$", f)
g <- grep("\\e", f)
g <- grep("e", f)
g <- grep("e$", f)
g <- grep("[A-Z]$", f)
g <- grepl("e$", f)
#check goodness of data
summary(mounds$HeightMax) # sanity check of heighs range
which(mounds$HeightMax[mounds$Type!="Settlement Mound"]>7)
mounds[65,]  # this shows that Bara's types are better than Adela's
mounds_adela <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds_bara <- read_csv2("data/Attributes.csv")
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
mounds_adela <- read_csv("data/ElenovoMounds_cleaned.csv")
mounds_bara <- read_csv2("data/Attributes.csv")
# Alternative source https://raw.githubusercontent.com/adivea/Elenovo2017/master/data/ElenovoMounds_cleaned.csv
?download.file() #
dim(mounds_adela)
dim(mounds_bara)
colnames(mounds_adela)
colnames(mounds_bara)
head(mounds_adela)
mounds <- merge(mounds_adela, mounds_bara[,c(2,3,9)], # picking uuid, identifier and type from Bara
by ="identifier", all.y=TRUE)
mounds
colnames(mounds)
dim(mounds)
mounds$Latitude[1:5]
which(mounds$HeightMax[mounds$Type!="Settlement Mound"]>7)
which(mounds$HeightMax[mounds$Type!="Settlement Mound"]>5)
which(mounds$HeightMax[mounds$Type!="Settlement Mound"]>0)
mounds$Type!="Settlement Mound"
mounds$Type
colnames(mounds)
colnames(mounds)[43]<-"Type"
which(mounds$HeightMax[mounds$Type!="Settlement Mound"]>7)
mounds[65,]  # this shows that Bara's types are better than Adela's
#rename duplicate columns (what are the benefits of these options?)
colnames(mounds$Type.x) <- "Type_Adela"
colnames(mounds)[5]<- "Type_Adela"
levels(mounds$Type)
levels(mounds$Type)
levels(factor(mounds$Type))
class(mounds$Type)
mounds$Type[5:10]
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele
MedianH <- mounds %>%
group_by(Type) %>%
summarize(medianHeight=median(HeightMax, na.rm=TRUE),medianDiam=median(DiameterMax, na.rm=TRUE))
MedianH
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
MeanDiam
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4], MeanDiam[-3:-4, -1])
Ele_stats
Ele
MeanH
Ele
MedianH
MeanH
MeanH
MedianH
MeanDiam
MeanH
# check categories of mound type (via conversion to factor)
levels(factor(mounds$Type))
Ele <- mounds %>%
group_by(Type) %>%
tally()
Ele
MedianH <- mounds %>%
group_by(Type) %>%
summarize(medianHeight=median(HeightMax, na.rm=TRUE),medianDiam=median(DiameterMax, na.rm=TRUE))
MedianH
MeanH <- mounds %>%
group_by(Type) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE))
MeanH  # beware of the Uncertain feature if reusing
MeanDiam <- mounds %>%
group_by(Type) %>%
summarize(minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
MeanDiam
Ele_stats <- cbind(Ele[-3:-4,],MeanH[-3:-4,2:4], MeanDiam[-3:-4, -1])
Ele_stats
mounds_index <- which(mounds$Type=="Burial Mound")
uncertain_index <- which(mounds$Type=="Uncertain Mound")
extinct_index <- which(mounds$Type=="Extinct Burial Mound")
# create boxplot of heights for mound phenomena (no surf. scatter or other)
mound_index <- mounds[c(mounds_index,extinct_index,uncertain_index),]
head(mound_index)
boxplot(HeightMax~Type, mound_index)
p <- ggplot(mound_index, aes(Type, HeightMax, color=Type)) +
geom_violin(trim=FALSE)
p
# violin plot with mean points
p + stat_summary(fun.y=mean, geom="point", shape=23, size=2)
# violin plot with median points
p + stat_summary(fun.y=median, geom="point", size=2, color="red")
# violin plot with jittered points
# 0.2 : degree of jitter in x direction
p + geom_jitter(shape=16, position=position_jitter(0.2))
mounds %>%
group_by(Source) %>%
ggplot(mounds$HeightMax)
teamprogress <- mounds %>%
group_by(createdBy, Date) %>%
tally()
teamprogress[20:30,]
teamprogress
tail(teamprogress)
teamprogress %>%
arrange(Date)
teamprogress %>%
arrange(n)
teamprogress %>%
arrange(desc(n))
View(mounds)
View(mounds)
library(leaflet)
leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(lon=mounds$Longitude, lat = mounds$Latitude,
radius = mounds$HeightMax, group="Legacy",
#fillOpacity = 0.5, weight=2,
#fillColor = "yellow",
popup = paste0("MoundID: ", mounds$identifier,
"<br> Height: ", mounds$HeightMax,
"<br> Robber's trenches: ", mounds$RTDescription)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial"),
overlayGroups = c("Legacy"),
options = layersControlOptions(collapsed = T))
leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(long=mounds$Longitude, lat = mounds$Latitude,
radius = mounds$HeightMax, group="Legacy",
#fillOpacity = 0.5, weight=2,
#fillColor = "yellow",
popup = paste0("MoundID: ", mounds$identifier,
"<br> Height: ", mounds$HeightMax,
"<br> Robber's trenches: ", mounds$RTDescription)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial"),
overlayGroups = c("Legacy"),
options = layersControlOptions(collapsed = T))
?addCircleMarkers
leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(lng = mounds$Longitude, lat = mounds$Latitude,
radius = mounds$HeightMax, group="Legacy",
#fillOpacity = 0.5, weight=2,
#fillColor = "yellow",
popup = paste0("MoundID: ", mounds$identifier,
"<br> Height: ", mounds$HeightMax,
"<br> Robber's trenches: ", mounds$RTDescription)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial"),
overlayGroups = c("Legacy"),
options = layersControlOptions(collapsed = T))
leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(lng = as.numeric(mounds$Longitude),
lat = as.numeric(mounds$Latitude),
radius = mounds$HeightMax, group="Legacy",
#fillOpacity = 0.5, weight=2,
#fillColor = "yellow",
popup = paste0("MoundID: ", mounds$identifier,
"<br> Height: ", mounds$HeightMax,
"<br> Robber's trenches: ", mounds$RTDescription)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial"),
overlayGroups = c("Legacy"),
options = layersControlOptions(collapsed = T))
Source <- mounds %>%
group_by(Source) %>%
tally()
Source
Stats <- mounds %>%
group_by(Source) %>%
summarize(minHeight=min(HeightMax, na.rm=TRUE), maxHeight=max(HeightMax,na.rm=TRUE), meanHeight = mean(HeightMax, na.rm=TRUE),
minDiam=min(DiameterMax, na.rm=TRUE), maxDiam=max(DiameterMax,na.rm=TRUE), meanDiam = mean(DiameterMax, na.rm=TRUE))
Stats
Source_stats <- cbind(Source,Stats[,-1])  # eliminate duplicate column
Source_stats
source('~/Documents/RStudio/Elenovo2017/ElenovoMounds.R')
# violin plot with mean points
p + stat_summary(fun=mean, geom="point", shape=23, size=2)
# violin plot with median points
p + stat_summary(fun=median, geom="point", size=2, color="red")
source('~/Documents/RStudio/Elenovo2017/ElenovoMounds.R')
source('~/Documents/RStudio/Elenovo2017/ElenovoMounds.R')
map <- leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(lng = as.numeric(mounds$Longitude),
lat = as.numeric(mounds$Latitude),
radius = mounds$HeightMax, group="Legacy",
popup = paste0("MoundID: ", mounds$identifier,
"<br> Height: ", mounds$HeightMax,
"<br> Robber's trenches: ", mounds$RTDescription)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial"),
overlayGroups = c("Legacy"),
options = layersControlOptions(collapsed = T))
map
source('~/Documents/RStudio/Elenovo2017/ElenovoMounds.R')
### Streamlining Mound Condition (can be done in OpenRefine)
levels(factor(mounds$Condition))
mounds <- mounds %>%
mutate(Condition = str_extract(Condition, "\\d")) %>%
mutate(Condition = case_when(Condition == 0 ~ "NA",
Condition == 6 ~ "5",
Condition != 0 ~ Condition))
mounds$Condition <- as.numeric(mounds$Condition)
unique(mounds$Condition)
getwd()
write_csv(mounds, "output/Condition.csv")
library(shiny); runApp('02_interactive_data_explorer.R')
source('~/Documents/RStudio/Elenovo2017/01_ElenovoMounds.R')
map
